import type { Comment, Post, RedditMediaMedata } from '@services/api';
import { PaletteDark } from '@theme/colors';

type PostData = Post['data'];
type CommentT1 = Extract<Comment, { kind: 't1' }>;
type CommentData = CommentT1['data'];

const clone = <T>(value: T): T => {
  if (value === undefined || value === null) {
    return value as T;
  }
  return JSON.parse(JSON.stringify(value));
};

const basePreviewImage = {
  source: {
    url: 'https://picsum.photos/id/237/1200/800',
    width: 1200,
    height: 800,
  },
  resolutions: [
    { url: 'https://picsum.photos/id/237/320/213', width: 320, height: 213 },
    { url: 'https://picsum.photos/id/237/640/426', width: 640, height: 426 },
    { url: 'https://picsum.photos/id/237/960/640', width: 960, height: 640 },
  ],
  id: 'preview-image',
};

const basePostData: PostData = {
  approved_at_utc: null,
  subreddit: 'reactnative',
  selftext:
    'Here is a detailed case study about building a Reddit client in React Native.\n\n- Fast gesture-based navigation\n- Theming with Material 3 tokens\n- Offline caching',
  author_fullname: 't2_sample',
  saved: false,
  mod_reason_title: null,
  gilded: 0,
  clicked: false,
  is_gallery: false,
  title: 'Building a slick Reddit client with Expo and React Native',
  link_flair_richtext: [{ e: 'text', t: 'Showcase' }],
  subreddit_name_prefixed: 'r/reactnative',
  hidden: false,
  pwls: 0,
  link_flair_css_class: '',
  downs: 0,
  thumbnail_height: 140,
  top_awarded_type: null,
  hide_score: false,
  media_metadata: undefined,
  gallery_data: undefined,
  name: 't3_sample123',
  quarantine: false,
  link_flair_text_color: 'dark',
  upvote_ratio: 0.97,
  author_flair_background_color: null,
  subreddit_type: 'public',
  ups: 2980,
  total_awards_received: 5,
  media_embed: {},
  thumbnail_width: 140,
  author_flair_template_id: 'template123',
  is_original_content: true,
  user_reports: [],
  secure_media: null,
  is_reddit_media_domain: true,
  is_meta: false,
  category: null,
  secure_media_embed: {},
  link_flair_text: 'Showcase',
  can_mod_post: false,
  score: 2980,
  approved_by: null,
  is_created_from_ads_ui: false,
  author_premium: false,
  thumbnail: 'https://picsum.photos/id/237/200/140',
  edited: false,
  author_flair_css_class: null,
  author_flair_richtext: [{ e: 'text', t: 'Creator' }],
  gildings: {},
  content_categories: null,
  is_self: false,
  mod_note: null,
  created: 1710000000,
  link_flair_type: 'richtext',
  wls: 0,
  removed_by_category: null,
  banned_by: null,
  author_flair_type: 'richtext',
  domain: 'i.redd.it',
  allow_live_comments: true,
  selftext_html: '<p>Here is a detailed case study...</p>',
  likes: null,
  suggested_sort: 'confidence',
  banned_at_utc: null,
  view_count: null,
  archived: false,
  no_follow: false,
  is_crosspostable: true,
  pinned: false,
  over_18: false,
  preview: {
    images: [clone(basePreviewImage)],
    enabled: false,
  },
  all_awardings: [],
  awarders: [],
  media_only: false,
  link_flair_template_id: 'template123',
  can_gild: true,
  spoiler: false,
  locked: false,
  author_flair_text: 'Creator',
  treatment_tags: [],
  visited: false,
  removed_by: null,
  num_reports: null,
  distinguished: null,
  subreddit_id: 't5_2uq0d',
  author_is_blocked: false,
  mod_reason_by: null,
  removal_reason: null,
  link_flair_background_color: '#FFBC00',
  id: 'sample123',
  is_robot_indexable: true,
  report_reasons: null,
  author: 'sample_author',
  discussion_type: null,
  num_comments: 356,
  send_replies: true,
  whitelist_status: 'all_ads',
  contest_mode: false,
  mod_reports: [],
  author_patreon_flair: false,
  author_flair_text_color: 'dark',
  permalink: '/r/reactnative/comments/sample123/building_a_slick_reddit_client/',
  parent_whitelist_status: 'all_ads',
  stickied: false,
  url: 'https://i.redd.it/sample123.jpg',
  subreddit_subscribers: 125000,
  created_utc: 1710000000,
  num_crossposts: 0,
  url_overridden_by_dest: 'https://i.redd.it/sample123.jpg',
  media: null,
  is_video: false,
  crosspost_parent_list: undefined,
  poll_data: undefined,
};

const baseCommentData: CommentData = {
  subreddit_id: 't5_2uq0d',
  approved_at_utc: null,
  author_is_blocked: false,
  comment_type: null,
  awarders: [],
  mod_reason_by: null,
  banned_by: null,
  author_flair_type: 'text',
  total_awards_received: 0,
  subreddit: 'reactnative',
  author_flair_template_id: null,
  likes: null,
  replies: undefined,
  user_reports: [],
  saved: false,
  id: 'comment123',
  banned_at_utc: null,
  mod_reason_title: null,
  gilded: 0,
  archived: false,
  collapsed_reason_code: null,
  no_follow: false,
  author: 'thoughtful_dev',
  can_mod_post: false,
  created_utc: 1710001000,
  send_replies: true,
  parent_id: 't3_sample123',
  score: 245,
  author_fullname: 't2_commenter',
  approved_by: null,
  mod_note: null,
  all_awardings: [],
  collapsed: false,
  body: 'This implementation looks great! Have you considered prefetching media assets for smoother carousels?',
  edited: false,
  top_awarded_type: null,
  author_flair_css_class: null,
  name: 't1_comment123',
  is_submitter: false,
  downs: 0,
  author_flair_richtext: [{ e: 'text', t: 'Helper' }],
  author_patreon_flair: false,
  body_html: '<p>This implementation looks great!</p>',
  removal_reason: null,
  collapsed_reason: null,
  distinguished: null,
  associated_award: null,
  stickied: false,
  author_premium: false,
  can_gild: true,
  gildings: {},
  unrepliable_reason: null,
  author_flair_text_color: 'dark',
  score_hidden: false,
  permalink: '/r/reactnative/comments/sample123/comment/comment123/',
  subreddit_type: 'public',
  locked: false,
  report_reasons: null,
  created: 1710001000,
  author_flair_text: 'Helper',
  treatment_tags: [],
  link_id: 't3_sample123',
  subreddit_name_prefixed: 'r/reactnative',
  controversiality: 0,
  depth: 0,
  author_flair_background_color: null,
  collapsed_because_crowd_control: null,
  mod_reports: [],
  num_reports: null,
  ups: 245,
  media_metadata: undefined,
};

export const mockRedditMedia: RedditMediaMedata = {
  status: 'valid',
  e: 'AnimatedImage',
  m: 'image/gif',
  id: 'media1',
  p: [
    { x: 64, y: 64, u: 'https://placekitten.com/64/64' },
    { x: 128, y: 128, u: 'https://placekitten.com/128/128' },
    { x: 256, y: 256, u: 'https://placekitten.com/256/256' },
  ],
  s: {
    x: 512,
    y: 512,
    u: 'https://placekitten.com/512/512',
    gif: 'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',
    mp4: 'https://samplelib.com/lib/preview/mp4/sample-5s.mp4',
  },
  t: 'gif',
};

export const createMockPost = (overrides: Partial<PostData> = {}): Post => ({
  kind: 't3',
  data: {
    ...clone(basePostData),
    ...overrides,
  },
});

export const createMockComment = (overrides: Partial<CommentData> = {}): CommentT1 => ({
  kind: 't1',
  data: {
    ...clone(baseCommentData),
    ...overrides,
  },
});

export const storyTheme = PaletteDark;
